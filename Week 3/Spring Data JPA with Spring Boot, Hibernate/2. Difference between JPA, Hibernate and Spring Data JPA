1. Java Persistence API (JPA)
JPA is a specification (interface) for managing relational data in Java applications.

It outlines how Java classes should be mapped to relational database tables.

JPA itself does not provide an implementation.

It relies on a provider like Hibernate or EclipseLink to work.

Configuration is done via persistence.xml or through annotations such as @Entity, @Id.

It uses JPQL (Java Persistence Query Language), a query language designed around Java objects.

Developers must manually implement repository logic using the EntityManager.

JPA does not offer built-in repository abstraction or automatically generated CRUD methods.

It is designed to ensure portability across various ORM tools.

Example:
Define a Student entity using annotations and persist it using EntityManager.

2. Hibernate
Hibernate is a widely used implementation of the JPA specification.

Itâ€™s an ORM (Object-Relational Mapping) framework that maps Java objects to database tables.

Hibernate can be used independently or as a JPA provider.

It offers advanced features such as:

HQL (Hibernate Query Language)

Criteria API for dynamic query generation

First-level and second-level caching

Batch processing

Support for custom mappings and interceptors

Supports multiple query types: JPQL, HQL, and native SQL.

Communicates with the database using either its native Session API or the EntityManager.

Offers flexible configuration via hibernate.cfg.xml or annotations.

More powerful and customizable than plain JPA.

Example:
Use Hibernate-specific settings to optimize caching and batch fetch size for large datasets.

3. Spring Data JPA
A Spring module built on top of JPA, typically using Hibernate under the hood.

Provides a higher-level abstraction over JPA to streamline development.

Removes boilerplate code for common operations like save, delete, update, and find.

Supports auto-generated query logic through repository interfaces such as JpaRepository and CrudRepository.

Allows query methods based on naming conventions (e.g., findByEmail, findByAgeGreaterThan).

Supports JPQL, native SQL, and custom query annotations.

Easily configured via Spring Boot annotations or Java-based configuration classes.

Integrates smoothly with Spring Boot, Spring Security, Spring MVC, etc.

Simplifies tasks like pagination, sorting, projections, and dynamic queries.

Ideal for rapid development of microservices and modern web applications.

Example:
Create a UserRepository interface with no implementation code, and perform full CRUD operations automatically.

